# .github/workflows/ci.yml
# .github/workflows/ci.yml
name: IRIS DVC MLOps CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev # Run CI on PRs to both branches

jobs:
  test_and_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # ----------------------------------------------------
      # 1. SETUP CORE ENVIRONMENT
      # ----------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install Python dependencies (excluding CML, which is installed by the next action)
      - name: Install dependencies (DVC, Pytest)
        run: |
          sudo apt-get update
          pip install -r requirements.txt
          
      # ----------------------------------------------------
      # 2. DVC & GCS AUTH
      # ----------------------------------------------------
      - name: Configure DVC for GCS Remote
        run: |
          dvc remote add -d gcs_bucket gs://week-2-mlops-bucket/dvc_remote
          dvc config core.no_scm true

      - name: Set Google Cloud Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: DVC Pull Data and Model
        run: |
          # Use --force to prevent issues with files generated/left over by the runner
          dvc pull data/V3_augmented.csv.dvc --force
          dvc pull artifacts.dvc --force 
          
      # ----------------------------------------------------
      # 3. TESTING
      # ----------------------------------------------------
      - name: Run Pytest Validation and Evaluation Tests
        run: pytest tests/test_pipeline.py

      # ----------------------------------------------------
      # 4. CML SETUP AND REPORTING
      # ----------------------------------------------------
      - name: Setup CML 🛠️
        uses: iterative/setup-cml@v2
        
      - name: Create CML Sanity Report
        if: github.event_name == 'pull_request'
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## CI/CD Pipeline Status Report 🤖" > report.md
          echo "" >> report.md
          echo "### Data and Model DVC Status" >> report.md
          echo "- **Data Version:** \`data/V3_augmented.csv\` (Pulled from GCS)" >> report.md
          echo "- **Model Version:** Latest version in \`artifacts/\`" >> report.md
          echo "" >> report.md
          echo "### Test Results (pytest)" >> report.md
          # NOTE: These results are hardcoded. In a real pipeline, you would parse the pytest output here.
          echo "- **Data Validation:** ✅ Passed" >> report.md
          echo "- **Model Sanity Check:** ✅ Passed" >> report.md
          echo "" >> report.md
          echo "CI pipeline successfully fetched artifacts from DVC and passed all tests on commit \`${{ github.sha }}\`." >> report.md
          
          # Use the CML command to post the report as a comment on the Pull Request
          cml comment create report.md
